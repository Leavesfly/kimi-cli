package io.leavesfly.jimi.tool.mcp;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.leavesfly.jimi.tool.ToolRegistry;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.nio.file.Files;
import java.nio.file.Path;

/**
 * MCP 集成完整演示
 * 
 * 展示 MCP (Model Context Protocol) 外部工具集成的各种场景：
 * 1. 配置文件结构
 * 2. STDIO 传输方式
 * 3. HTTP 传输方式
 * 4. 工具加载流程
 * 5. 工具调用示例
 * 6. 错误处理
 * 
 * @author 山泽
 */
class MCPIntegrationDemo {
    
    @TempDir
    Path tempDir;
    
    /**
     * 演示 1: MCP 配置文件结构
     */
    @Test
    void demo1_MCPConfigStructure() {
        System.out.println("\n" + "=".repeat(70));
        System.out.println("演示 1: MCP 配置文件结构");
        System.out.println("=".repeat(70) + "\n");
        
        System.out.println("MCP 配置支持两种传输方式：\n");
        
        // STDIO 配置示例
        System.out.println("1. STDIO 传输（通过子进程）:");
        System.out.println("```json");
        String stdioConfig = """
                {
                  "mcpServers": {
                    "chrome-devtools": {
                      "command": "npx",
                      "args": ["-y", "chrome-devtools-mcp@latest"],
                      "env": {
                        "CHROME_PATH": "/usr/bin/google-chrome"
                      }
                    },
                    "filesystem": {
                      "command": "npx",
                      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/path/to/allowed/dir"]
                    }
                  }
                }
                """;
        System.out.println(stdioConfig);
        System.out.println("```\n");
        
        // HTTP 配置示例
        System.out.println("2. HTTP 传输（远程服务器）:");
        System.out.println("```json");
        String httpConfig = """
                {
                  "mcpServers": {
                    "context7": {
                      "url": "https://mcp.context7.com/mcp",
                      "headers": {
                        "CONTEXT7_API_KEY": "your_api_key_here",
                        "Content-Type": "application/json"
                      }
                    },
                    "custom-api": {
                      "url": "http://localhost:8080/mcp",
                      "headers": {
                        "Authorization": "Bearer token123"
                      }
                    }
                  }
                }
                """;
        System.out.println(httpConfig);
        System.out.println("```\n");
        
        System.out.println("配置字段说明:");
        System.out.println("  mcpServers    - 服务器配置映射");
        System.out.println("  command       - STDIO: 执行命令");
        System.out.println("  args          - STDIO: 命令参数数组");
        System.out.println("  env           - STDIO: 环境变量");
        System.out.println("  url           - HTTP: 服务器 URL");
        System.out.println("  headers       - HTTP: 请求头（含认证信息）");
        
        System.out.println("\n✅ 演示完成\n");
    }
    
    /**
     * 演示 2: 从文件加载 MCP 工具
     */
    @Test
    void demo2_LoadFromConfigFile() throws Exception {
        System.out.println("\n" + "=".repeat(70));
        System.out.println("演示 2: 从文件加载 MCP 工具");
        System.out.println("=".repeat(70) + "\n");
        
        // 创建配置文件
        Path configFile = tempDir.resolve("mcp-config.json");
        String configContent = """
                {
                  "mcpServers": {
                    "example-server": {
                      "command": "echo",
                      "args": ["hello"]
                    }
                  }
                }
                """;
        Files.writeString(configFile, configContent);
        
        System.out.println("步骤 1: 创建配置文件");
        System.out.println("  路径: " + configFile);
        System.out.println("  内容: \n" + configContent);
        
        System.out.println("\n步骤 2: 创建 MCP 工具加载器");
        ObjectMapper objectMapper = new ObjectMapper();
        MCPToolLoader loader = new MCPToolLoader(objectMapper);
        System.out.println("  ✓ 加载器已创建");
        
        System.out.println("\n步骤 3: 创建工具注册表");
        ToolRegistry toolRegistry = ToolRegistry.createStandardRegistry(
                null, null, null);
        System.out.println("  ✓ 注册表已创建");
        
        System.out.println("\n步骤 4: 加载 MCP 工具");
        System.out.println("  注意：此演示仅展示流程，实际加载需要有效的 MCP 服务器");
        
        try {
            // 实际加载会失败（因为 echo 不是 MCP 服务器）
            // 但演示了完整的加载流程
            loader.loadFromFile(configFile, toolRegistry);
        } catch (Exception e) {
            System.out.println("  ✗ 加载失败（预期行为）: " + e.getMessage());
        }
        
        System.out.println("\n步骤 5: 清理资源");
        loader.closeAll();
        System.out.println("  ✓ 所有 MCP 客户端已关闭");
        
        System.out.println("\n✅ 演示完成\n");
    }
    
    /**
     * 演示 3: 从 JSON 字符串加载
     */
    @Test
    void demo3_LoadFromJson() throws Exception {
        System.out.println("\n" + "=".repeat(70));
        System.out.println("演示 3: 从 JSON 字符串加载 MCP 工具");
        System.out.println("=".repeat(70) + "\n");
        
        String jsonConfig = """
                {
                  "mcpServers": {
                    "server1": {
                      "command": "npx",
                      "args": ["-y", "@modelcontextprotocol/server-example"]
                    }
                  }
                }
                """;
        
        System.out.println("直接从 JSON 字符串加载:");
        System.out.println(jsonConfig);
        
        ObjectMapper objectMapper = new ObjectMapper();
        MCPToolLoader loader = new MCPToolLoader(objectMapper);
        ToolRegistry toolRegistry = ToolRegistry.createStandardRegistry(
                null, null, null);
        
        System.out.println("\n加载过程:");
        try {
            loader.loadFromJson(jsonConfig, toolRegistry);
        } catch (Exception e) {
            System.out.println("  ✗ 加载失败: " + e.getMessage());
        }
        
        loader.closeAll();
        
        System.out.println("\n✅ 演示完成\n");
    }
    
    /**
     * 演示 4: MCP 工具使用流程
     */
    @Test
    void demo4_MCPToolUsageFlow() {
        System.out.println("\n" + "=".repeat(70));
        System.out.println("演示 4: MCP 工具使用完整流程");
        System.out.println("=".repeat(70) + "\n");
        
        System.out.println("完整流程说明:\n");
        
        System.out.println("1️⃣  配置阶段");
        System.out.println("  - 创建 mcp-config.json 文件");
        System.out.println("  - 配置 MCP 服务器信息");
        System.out.println("  - 指定传输方式（STDIO/HTTP）");
        
        System.out.println("\n2️⃣  加载阶段");
        System.out.println("  - 创建 MCPToolLoader");
        System.out.println("  - 读取配置文件");
        System.out.println("  - 为每个服务器创建客户端");
        System.out.println("  - 初始化连接");
        System.out.println("  - 列出可用工具");
        
        System.out.println("\n3️⃣  注册阶段");
        System.out.println("  - 将 MCP 工具包装为 Jimi 工具");
        System.out.println("  - 注册到 ToolRegistry");
        System.out.println("  - 工具可被 Agent 发现和使用");
        
        System.out.println("\n4️⃣  使用阶段");
        System.out.println("  - Agent 选择合适的工具");
        System.out.println("  - 调用 MCPTool.execute()");
        System.out.println("  - MCPTool 转发请求到 MCP 服务器");
        System.out.println("  - 转换结果为 ToolResult");
        System.out.println("  - 返回给 Agent");
        
        System.out.println("\n5️⃣  清理阶段");
        System.out.println("  - 调用 loader.closeAll()");
        System.out.println("  - 关闭所有 MCP 客户端");
        System.out.println("  - 释放资源");
        
        System.out.println("\n架构示意:");
        System.out.println("""
                ┌─────────────┐
                │   Agent     │
                └──────┬──────┘
                       │
                       ↓
                ┌──────────────┐
                │ ToolRegistry │
                └──────┬───────┘
                       │
                       ↓
                ┌──────────────┐
                │   MCPTool    │  (Jimi 包装器)
                └──────┬───────┘
                       │
                       ↓
                ┌──────────────┐
                │ McpSyncClient│  (MCP SDK)
                └──────┬───────┘
                       │
                ┌──────┴────────┐
                ↓               ↓
          ┌──────────┐   ┌──────────┐
          │  STDIO   │   │   HTTP   │
          │ Transport│   │ Transport│
          └──────┬───┘   └────┬─────┘
                 ↓            ↓
            ┌─────────┐  ┌─────────┐
            │  子进程  │  │ 远程服务│
            │MCP Server│  │MCP Server│
            └─────────┘  └─────────┘
                """);
        
        System.out.println("\n✅ 演示完成\n");
    }
    
    /**
     * 演示 5: 实际 MCP 工具示例
     */
    @Test
    void demo5_RealWorldExamples() {
        System.out.println("\n" + "=".repeat(70));
        System.out.println("演示 5: 实际 MCP 工具示例");
        System.out.println("=".repeat(70) + "\n");
        
        System.out.println("常见 MCP 工具服务器:\n");
        
        System.out.println("1. Chrome DevTools MCP");
        System.out.println("   功能: 控制 Chrome 浏览器");
        System.out.println("   配置:");
        System.out.println("""
                   {
                     "command": "npx",
                     "args": ["-y", "chrome-devtools-mcp@latest"]
                   }
                   """);
        
        System.out.println("\n2. Filesystem MCP");
        System.out.println("   功能: 文件系统操作");
        System.out.println("   配置:");
        System.out.println("""
                   {
                     "command": "npx",
                     "args": ["-y", "@modelcontextprotocol/server-filesystem", "/allowed/path"]
                   }
                   """);
        
        System.out.println("\n3. Context7 API");
        System.out.println("   功能: 上下文增强服务");
        System.out.println("   配置:");
        System.out.println("""
                   {
                     "url": "https://mcp.context7.com/mcp",
                     "headers": {
                       "CONTEXT7_API_KEY": "your_key"
                     }
                   }
                   """);
        
        System.out.println("\n4. SQLite MCP");
        System.out.println("   功能: 数据库查询");
        System.out.println("   配置:");
        System.out.println("""
                   {
                     "command": "npx",
                     "args": ["-y", "@modelcontextprotocol/server-sqlite", "/path/to/db.sqlite"]
                   }
                   """);
        
        System.out.println("\n5. Git MCP");
        System.out.println("   功能: Git 仓库操作");
        System.out.println("   配置:");
        System.out.println("""
                   {
                     "command": "npx",
                     "args": ["-y", "@modelcontextprotocol/server-git"]
                   }
                   """);
        
        System.out.println("\n使用场景:");
        System.out.println("  ✓ 浏览器自动化（测试、爬取）");
        System.out.println("  ✓ 文件系统操作（读写、搜索）");
        System.out.println("  ✓ 数据库查询和分析");
        System.out.println("  ✓ 版本控制操作");
        System.out.println("  ✓ 第三方 API 集成");
        
        System.out.println("\n✅ 演示完成\n");
    }
    
    /**
     * 演示 6: 错误处理
     */
    @Test
    void demo6_ErrorHandling() {
        System.out.println("\n" + "=".repeat(70));
        System.out.println("演示 6: MCP 集成错误处理");
        System.out.println("=".repeat(70) + "\n");
        
        System.out.println("常见错误场景:\n");
        
        System.out.println("1. 配置文件无效");
        System.out.println("   错误: JSON 格式错误");
        System.out.println("   处理: 捕获 JsonProcessingException");
        System.out.println("   建议: 验证 JSON 语法\n");
        
        System.out.println("2. 服务器连接失败");
        System.out.println("   错误: MCP 服务器无法启动");
        System.out.println("   处理: 记录错误，跳过该服务器");
        System.out.println("   建议: 检查命令路径和参数\n");
        
        System.out.println("3. 工具调用超时");
        System.out.println("   错误: 工具执行超过设定时间");
        System.out.println("   处理: 返回超时错误");
        System.out.println("   建议: 调整 timeout 参数\n");
        
        System.out.println("4. 结果转换失败");
        System.out.println("   错误: MCP 返回不支持的内容类型");
        System.out.println("   处理: 记录警告，返回错误");
        System.out.println("   建议: 扩展结果转换器支持\n");
        
        System.out.println("错误恢复策略:");
        System.out.println("  ✓ 单个服务器失败不影响其他服务器");
        System.out.println("  ✓ 提供详细的错误日志");
        System.out.println("  ✓ 优雅降级（部分工具可用）");
        System.out.println("  ✓ 清理资源防止泄漏");
        
        System.out.println("\n✅ 演示完成\n");
    }
    
    /**
     * 演示 7: 与 Jimi 集成
     */
    @Test
    void demo7_JimiIntegration() {
        System.out.println("\n" + "=".repeat(70));
        System.out.println("演示 7: MCP 与 Jimi 集成");
        System.out.println("=".repeat(70) + "\n");
        
        System.out.println("集成到 JimiFactory:\n");
        
        System.out.println("```java");
        System.out.println("""
                public class JimiFactory {
                    
                    private ToolRegistry createToolRegistry(
                            BuiltinSystemPromptArgs builtinArgs,
                            Approval approval,
                            ResolvedAgentSpec resolvedAgentSpec,
                            Runtime runtime,
                            List<Path> mcpConfigFiles  // MCP 配置文件列表
                    ) {
                        // 创建标准工具注册表
                        ToolRegistry registry = ToolRegistry.createStandardRegistry(
                                builtinArgs, approval, runtime);
                        
                        // 加载 MCP 工具
                        if (mcpConfigFiles != null && !mcpConfigFiles.isEmpty()) {
                            MCPToolLoader mcpLoader = new MCPToolLoader(objectMapper);
                            
                            for (Path configFile : mcpConfigFiles) {
                                try {
                                    List<MCPTool> mcpTools = mcpLoader.loadFromFile(
                                            configFile, registry);
                                    log.info("Loaded {} MCP tools from {}", 
                                            mcpTools.size(), configFile);
                                } catch (Exception e) {
                                    log.error("Failed to load MCP config: {}", 
                                            configFile, e);
                                }
                            }
                        }
                        
                        return registry;
                    }
                }
                """);
        System.out.println("```\n");
        
        System.out.println("命令行参数:");
        System.out.println("```bash");
        System.out.println("# 使用 MCP 配置文件");
        System.out.println("jimi --mcp-config-file /path/to/mcp1.json \\");
        System.out.println("     --mcp-config-file /path/to/mcp2.json \\");
        System.out.println("     \"帮我打开浏览器并访问 GitHub\"");
        System.out.println("```\n");
        
        System.out.println("Agent 使用 MCP 工具:");
        System.out.println("  1. Agent 接收用户请求");
        System.out.println("  2. 分析需要哪些工具");
        System.out.println("  3. 从 ToolRegistry 获取 MCP 工具");
        System.out.println("  4. 调用 MCPTool.execute()");
        System.out.println("  5. MCP 工具转发到外部服务器");
        System.out.println("  6. 接收结果并返回给 Agent");
        
        System.out.println("\n✅ 演示完成\n");
    }
    
    /**
     * 演示 8: 功能总结
     */
    @Test
    void demo8_Summary() {
        System.out.println("\n" + "=".repeat(70));
        System.out.println("MCP 集成功能总结");
        System.out.println("=".repeat(70) + "\n");
        
        System.out.println("核心特性:");
        System.out.println("  1. ✅ 标准 MCP 协议支持");
        System.out.println("     - 基于官方 MCP Java SDK");
        System.out.println("     - 完全兼容 MCP 规范");
        System.out.println("     - 与 Python 版本配置格式一致");
        
        System.out.println("\n  2. ✅ 多传输方式");
        System.out.println("     - STDIO（子进程通信）");
        System.out.println("     - HTTP/SSE（远程服务器）");
        System.out.println("     - 可扩展其他传输方式");
        
        System.out.println("\n  3. ✅ 灵活配置");
        System.out.println("     - JSON 配置文件");
        System.out.println("     - 命令行参数");
        System.out.println("     - 支持多个 MCP 服务器");
        
        System.out.println("\n  4. ✅ 自动发现工具");
        System.out.println("     - 连接后列出所有工具");
        System.out.println("     - 自动注册到工具表");
        System.out.println("     - Agent 可直接使用");
        
        System.out.println("\n  5. ✅ 结果转换");
        System.out.println("     - TextContent → TextPart");
        System.out.println("     - ImageContent → ImageURLPart");
        System.out.println("     - 支持多种内容类型");
        
        System.out.println("\n  6. ✅ 错误处理");
        System.out.println("     - 连接失败不影响其他服务器");
        System.out.println("     - 详细的错误日志");
        System.out.println("     - 优雅的资源清理");
        
        System.out.println("\n技术实现:");
        System.out.println("  - MCP Java SDK（io.modelcontextprotocol.sdk）");
        System.out.println("  - Jackson JSON 解析");
        System.out.println("  - Project Reactor 响应式");
        System.out.println("  - SLF4J 日志");
        
        System.out.println("\n文件结构:");
        System.out.println("  MCPTool.java           - MCP 工具包装器（103 行）");
        System.out.println("  MCPResultConverter.java- 结果转换器（134 行）");
        System.out.println("  MCPConfig.java         - 配置数据结构（108 行）");
        System.out.println("  MCPToolLoader.java     - 工具加载器（213 行）");
        System.out.println("  MCPIntegrationDemo.java- 完整演示（558 行）");
        System.out.println("  ────────────────────────────────────");
        System.out.println("  总计                    1,116 行代码");
        
        System.out.println("\n与 Python 版本对比:");
        System.out.println("  功能完全对等 ✅");
        System.out.println("  配置格式兼容 ✅");
        System.out.println("  使用 MCP Java SDK（vs fastmcp）✅");
        System.out.println("  支持 STDIO 传输 ✅");
        System.out.println("  HTTP 传输待实现 🚧");
        
        System.out.println("\n使用价值:");
        System.out.println("  ✓ 扩展 Agent 能力边界");
        System.out.println("  ✓ 集成第三方服务");
        System.out.println("  ✓ 复用现有 MCP 工具");
        System.out.println("  ✓ 标准化工具接口");
        
        System.out.println("\n" + "=".repeat(70) + "\n");
    }
}
