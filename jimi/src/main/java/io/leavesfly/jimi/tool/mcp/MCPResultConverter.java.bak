package io.leavesfly.jimi.tool.mcp;

import io.leavesfly.jimi.soul.message.ContentPart;
import io.leavesfly.jimi.soul.message.ImagePart;
import io.leavesfly.jimi.soul.message.TextPart;
import io.leavesfly.jimi.tool.ToolResult;
import io.modelcontextprotocol.sdk.McpSchema;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;

/**
 * MCP 结果转换器
 * 
 * 将 MCP CallToolResult 转换为 Jimi ToolResult。
 * 处理多种内容类型：
 * - TextContent → TextPart
 * - ImageContent → ImagePart (base64)
 * - EmbeddedResource → ImagePart (base64)
 * - ResourceLink → ImagePart (URL)
 * 
 * @author 山泽
 */
@Slf4j
public class MCPResultConverter {
    
    /**
     * 转换 MCP 调用结果为 Jimi 工具结果
     */
    public static ToolResult convert(McpSchema.CallToolResult mcpResult) {
        try {
            List<Object> contentParts = new ArrayList<>();
            
            // 遍历所有内容部分
            for (Object content : mcpResult.content()) {
                ContentPart part = convertContentPart(content);
                if (part != null) {
                    contentParts.add(part);
                }
            }
            
            // 如果只有一个文本部分，直接返回文本
            if (contentParts.size() == 1 && contentParts.get(0) instanceof TextPart textPart) {
                return ToolResult.ok(textPart.getText(), "");
            }
            
            // 多个部分或包含非文本内容
            return ToolResult.ok(contentParts, "");
            
        } catch (Exception e) {
            log.error("Failed to convert MCP result", e);
            return ToolResult.error(
                    "Failed to convert MCP result: " + e.getMessage(),
                    "Conversion error"
            );
        }
    }
    
    /**
     * 转换单个内容部分
     */
    private static ContentPart convertContentPart(Object content) {
        if (content instanceof McpSchema.TextContent textContent) {
            return convertTextContent(textContent);
            
        } else if (content instanceof McpSchema.ImageContent imageContent) {
            return convertImageContent(imageContent);
            
        } else if (content instanceof McpSchema.EmbeddedResource embeddedResource) {
            return convertEmbeddedResource(embeddedResource);
            
        } else {
            log.warn("Unsupported MCP content type: {}", content.getClass());
            return null;
        }
    }
    
    /**
     * 转换文本内容
     */
    private static TextPart convertTextContent(McpSchema.TextContent textContent) {
        return TextPart.builder()
                .text(textContent.text())
                .build();
    }
    
    /**
     * 转换图片内容（base64）
     */
    private static ImagePart convertImageContent(McpSchema.ImageContent imageContent) {
        String mimeType = imageContent.mimeType() != null ? 
                imageContent.mimeType() : "image/png";
        
        String dataUrl = String.format("data:%s;base64,%s", 
                mimeType, imageContent.data());
        
        return ImagePart.of(dataUrl);
    }
    
    /**
     * 转换嵌入式资源
     */
    private static ContentPart convertEmbeddedResource(McpSchema.EmbeddedResource resource) {
        if (resource.resource() instanceof McpSchema.BlobResourceContents blobResource) {
            String mimeType = blobResource.mimeType() != null ? 
                    blobResource.mimeType() : "application/octet-stream";
            
            // 只支持图片类型
            if (mimeType.startsWith("image/")) {
                String dataUrl = String.format("data:%s;base64,%s", 
                        mimeType, blobResource.blob());
                
                return ImagePart.of(dataUrl);
            } else {
                log.warn("Unsupported embedded resource MIME type: {}", mimeType);
                return null;
            }
        }
        
        return null;
    }
}
